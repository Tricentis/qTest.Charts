# Default values for qtest-insights-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
namespace:
  name: qtest
reloader:
  enabled: false
secrets:
  name: qtest-manager-secret
  sessionsName: qtest-manager-secret
replicaCount: 1
image:
  repository: qasymphony/insights-etl
  pullPolicy: IfNotPresent
  tag: "v2025.2.0.op"
imageCredentials:
  enabled: false
  # name: ""
  # registry: ""
  # username: ""
  # password: ""
  # email: ""
  # existingImageCredentials: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # A service account will be created for you if set to true. Set to false if you want to use your own.
  name: "qtest-insightsetl-sa"
deployment:
  annotations: {}
  singlePodPerNode: false
podAnnotations: {}
rollouts:
  enabled: false
  ingressClassName: alb
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
  steps:
    - setWeight: 20
    # if prometheus metrics are enabled
    # - analysis:
    #     templates:
    #     - templateName: success-rates
    #       clusterScope: true
    #     args:
    #     - name: service-name
    - setWeight: 50
    - pause: {duration: 10s}
service:
  targetPort: 8080
extraInitContainers: []
extraContainers: []
extraArgs: []
extraEnv: []
extraVolumeMounts: []
extraVolumes: []
qTestInsightsEtl:
  qTestLogPath: /logs
  qTestInsightsEtlDBName: qtest
  qTestInsightsEtlDBUser: postgres
  qTestInsightsEtlDBPort: 5432
  qTestInsightsEtlDBSchemaName: public
  qTestInsightsEtlDBHost: postgres.local
  qTestInsightsEtlWriteQTestDBName: qtest
  qTestInsightsEtlWriteQTestDBUser: postgres
  qTestInsightsEtlWriteQTestDBHost: postgres.local
  qTestInsightsEtlWriteQTestDBPort: 5432
  qTestInsightsEtlSessionDBName: sessions
  qTestInsightsEtlSessionDBUser: postgres
  qTestInsightsEtlSessionDBHost: postgres.local
  qTestInsightsEtlSessionDBPort: 5432
  qTestInsightsEtlSessionDBSchema: public
  writeSessionsDBHost: postgres.local
  writeSessionsDBName: sessions
  writeSessionsDBUser: postgres
  writeSessionsDBPort: 5432
  writeSessionsDBSchema: public
  autoRefreshDBLink: true
  qTestInsightsEtlDeploymentEnv: op
persistence:
  enabled: false
  ## Set annotations on pvc
  annotations: {}
  ## Specify an existing volume claim instead of creating a new one.
  ## When using this option all following options like storageClass, accessMode and size are ignored.
  # existingClaim:

  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass:
  accessMode: ReadWriteOnce
  size: 5Gi
  ## Specify extra volumes. Refer to ".spec.volumes" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  volumes: []
  ## Specify extra mounts. Refer to ".spec.containers.volumeMounts" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  mounts: []
# VPA values
vpaAutoscaling:
  enabled: false
  updatePolicy:
    updateMode: "Off"
  resourcePolicy:
    containerPolicies:
      - containerName: '*'
        controlledValues: RequestsAndLimits
# HPA values
autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 1
  healthApiPath: /ping
  targetPort: 8765
  periodSeconds: 30
  failureThreshold: 4
  targetCPUUtilizationPercentage: 85
  targetMemoryUtilizationPercentage: 85
resources:
  requests:
    cpu: 1
    memory: 2Gi
  limits:
    cpu: 1
    memory: 2Gi
limitRange:
  enabled: false
resourceQuota:
  enabled: false
nodeSelector: {}
tolerations: []
affinity: {}
