# Default values for qtest-launch app.

namespace:
  name: qtest
reloader:
  enabled: false
secrets:
  name: qtest-manager-secret
  aesSecretKeysName: qtest-aes-secret-keys
image:
  repository: qasymphony/launch
  pullPolicy: IfNotPresent
  tag: "2025.2.5"
imageCredentials:
  enabled: false
  # name: ""
  # registry: ""
  # username: ""
  # password: ""
  # email: ""
  # existingImageCredentials: ""
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # A service account will be created for you if set to true. Set to false if you want to use your own.
  name: "qtest-launch-sa"
deployment:
  annotations: {}
  singlePodPerNode: false
podAnnotations: {}
rollouts:
  enabled: false
  ingressClassName: alb
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
  steps:
    - setWeight: 20
    # if prometheus metrics are enabled
    # - analysis:
    #     templates:
    #     - templateName: success-rates
    #       clusterScope: true
    #     args:
    #     - name: service-name
    - setWeight: 50
    - pause: {duration: 10s}
service:
  type: LoadBalancer
  annotations: {}
  port: 3080
  targetPort: 3080
  targetHttpsPort: 3443
  serviceName: qtest-launch-service
extraInitContainers: []
extraContainers: []
extraArgs: []
extraEnv: []
extraVolumeMounts: []
extraVolumes: []
qTestLaunch:
  qTestLaunchDBName: qtest
  qTestLaunchDBUserName: postgres
  qTestLaunchDBHostName: postgres.local
  qTestLaunchDBPort: "5432"
  qTestLaunchRootURL: https://launch.local
  qTestLaunchQTestURL: https://nephele.qtest.local
  qTestLaunchNodeTLSRejectUnAuthorized: "0"
  qTestLaunchTCPWD: "qTest"
  qTestLaunchSSLRequired: false
  qTestLaunchSSLMountPath: "/mnt/secrets/tls"
  qTestLaunchDBSSLEnable: false
  qTestLaunchDBSSLMountPath: "/etc/ssl"
  qTestLaunchDBSSL: ""
  qTestLaunchDBCRT: ""
  # Array of cipher suites for SSL/TLS connection in OpenSSL format (e.g. ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"])
  qTestLaunchSSLCipherSuites: []
  qTestLaunchDeploymentEnv: "op"
  qTestLaunchNodeOptions: ""
#### Ingress/IngressClass (> K8s 1.24-1.30+) #####
ingressClass:
  enabled: false
  labels: {}
  controller: ingress.k8s.aws/alb
  isDefaultClass: true
  # Use to force a networking.k8s.io API Version for certain CI/CD applications. Ex. "v1"
  fallbackApiVersion: ""
ingress:
  enabled: true
  name: qtest-launch-ingress
  labels: {}
  annotations: {}
  canary:
    annotationPrefix: ""
    annotations: {}
    # canary-by-header: []
    # canary-by-header-pattern: []
  hosts:
    - host: launch.qtest.local
  paths: []
  extraPaths:
    - path: /*
      backendServiceName: qtest-launch-service
      pathType: ImplementationSpecific
      backendPort: 3080
  tls: []
  # - secretName: qtest-svc-tls
  #   hosts:
  #     - svc.qtest.com
  https: false
persistence:
  enabled: false
  ## Set annotations on pvc
  annotations: {}
  storageClass:
  accessMode: ReadWriteOnce
  size: 5Gi
  ## Specify extra volumes. Refer to ".spec.volumes" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  volumes: []
  ## Specify extra mounts. Refer to ".spec.containers.volumeMounts" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  mounts: []
# VPA values
vpaAutoscaling:
  enabled: false
  updatePolicy:
    updateMode: "Off"
  resourcePolicy:
    containerPolicies:
      - containerName: '*'
        controlledValues: RequestsAndLimits
# HPA values
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  healthApiPath: /health-check
  periodSeconds: 30
  failureThreshold: 4
  targetCPUUtilizationPercentage: 85
  targetMemoryUtilizationPercentage: 85
podDisruptionBudget:
  enabled: true
resources:
  requests:
    cpu: 1
    memory: 1Gi
  limits:
    cpu: 1
    memory: 1Gi
limitRange:
  enabled: false
resourceQuota:
  enabled: false
livenessProbe:
  httpGet:
    path: /health-check
    port: 3080
  periodSeconds: 30
livenessSslProbe:
  httpGet:
    path: /health-check
    scheme: HTTPS
    port: 3443
  periodSeconds: 30
readinessProbe:
  httpGet:
    path: /health-check
    port: 3080
  periodSeconds: 30
readinessSslProbe:
  httpGet:
    path: /health-check
    scheme: HTTPS
    port: 3443
  periodSeconds: 30
startupProbe:
  httpGet:
    path: /health-check
    port: 3080
  failureThreshold: 4
  periodSeconds: 30
startupSslProbe:
  httpGet:
    path: /health-check
    scheme: HTTPS
    port: 3443
  failureThreshold: 4
  periodSeconds: 30
nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: {}
