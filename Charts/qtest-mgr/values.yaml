## Default values for qtest-manager-chart.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.

## universal namespace for all qtest app services
namespace:
  name: qtest
## Deploys Stakater Reloader https://github.com/stakater/Reloader
reloader:
  enabled: false
## When Argo Rollouts is enabled, this will set Kubernetes deployment to Rollouts
## https://argoproj.github.io/rollouts/
rollouts:
  enabled: false
  ingressClassName: alb
  strategy:
    canary:
      maxSurge: "25%"
      maxUnavailable: 0
  steps:
    - setWeight: 20
      ## if prometheus metrics are enabled
      # - analysis:
      #     templates:
      #     - templateName: success-rates
      #       clusterScope: true
      #     args:
      #     - name: service-name
liquibase:
  enabled: true
  securityContext: {}
  ## Sets securityContext at the pod level.
  ## The following values for securityContext are recommended but may depend on your specific volume and filesystem settings
  # runAsNonRoot: true
  # runAsUser: 1000
  # runAsGroup: 1000
  annotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation, hook-succeeded
    # argocd.argoproj.io/hook: PreSync
    # argocd.argoproj.io/hook-delete-policy: HookSucceeded, BeforeHookCreation
  configmapAnnotations:
    helm.sh/hook: pre-install, pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation, hook-succeeded
    # argocd.argoproj.io/hook: PreSync
    # argocd.argoproj.io/sync-wave: "-5"
    # argocd.argoproj.io/hook-delete-policy: HookSucceeded, BeforeHookCreation
deployment:
  annotations: {}
  singlePodPerNode: false
podAnnotations: {}
podLabels: {}
image:
  repository: tricentisimage/qtest-mgr
  liquibase: tricentisimage/qtest-mgr-liquibase
  pullPolicy: IfNotPresent
  tag: "2025.2.7"
  liquibasetag: "2025.2.7"
  liquibasepullpolicy: IfNotPresent
imageCredentials:
  enabled: false
  # name: ""
  # registry: ""
  # username: ""
  # password: ""
  # email: ""
  # existingImageCredentials: ""
secrets:
  enabled: false
  useExistingTls: false
  ## existingConfigs must be qtest-manager-secret
  # existingConfigs: "qtest-manager-secret"
  aesSecretKeysName: qtest-aes-secret-keys
  oauthAppsSecretName: qtest-manager-secret
  oauthAppEnv:
    - name: OAUTH_APP_SP_SECRET
      key: oauth.app.sp.secret
    - name: OAUTH_APP_SP_GRANTS
      key: oauth.app.sp.grants
    - name: OAUTH_APP_SP_ACCESS_VALIDITY
      key: oauth.app.sp.access.validity
    - name: OAUTH_APP_SESSIONS_SECRET
      key: oauth.app.sessions.secret
    - name: OAUTH_APP_EXPLORER_SECRET
      key: oauth.app.explorer.secret
    - name: OAUTH_APP_WEB_EXPLORER_SECRET
      key: oauth.app.web-explorer.secret
    - name: OAUTH_APP_QMAP_SECRET
      key: oauth.app.qmap.secret
    - name: OAUTH_APP_JENKINS_SECRET
      key: oauth.app.jenkins.secret
    - name: OAUTH_APP_BAMBOO_SECRET
      key: oauth.app.bamboo.secret
    - name: OAUTH_APP_PULSE_SECRET
      key: oauth.app.pulse.secret
    - name: OAUTH_APP_TOSCA_SECRET
      key: oauth.app.tosca.secret
serviceAccount:
  create: true
  name:
  annotations: {}
  automountsatoken: false
service:
  type: LoadBalancer
  annotations: {}
  port: 8080
  targetPort: 8080
  targetHttpsPort: 8443
  serviceName: mgr-service
  # servicePortHttp: 80
  # servicePortHttps: 443
  # servicePortHttpName: http
  # servicePortHttpsName: https
shareProcessNamespace: "true"
## @param terminationGracePeriodSeconds Seconds qTest Manager pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
# -- Specify postStart and preStop lifecycle hooks for your qTest Manager containers
lifecycle: {}
extraInitContainers: []
extraContainers: []
extraArgs: []
extraEnv: []
extraVolumeMounts: []
extraVolumes: []
extraLabels: {}
extraDeploy: []
envFrom:
  ui:
    - configMapRef:
        name: qtest-manager-config
    - configMapRef:
        name: qtest-manager-ui-config
  api:
    - configMapRef:
        name: qtest-manager-config
    - configMapRef:
        name: qtest-manager-api-config
  notification:
    - configMapRef:
        name: qtest-manager-config
    - configMapRef:
        name: qtest-manager-notification-config
  poller:
    - configMapRef:
        name: qtest-manager-config
    - configMapRef:
        name: qtest-manager-poller-config
qTestManager:
  securityContext:
    runAsUser: 8877
    runAsNonRoot: true
    fsGroup: 8877
  analyticsUrlBase: "http://local"
  configureTimeoutTokenApplicationEnabled: true
  async:
    maxCpu: 101
    databaseCpu: 101
  server:
    sslMountPath: "/mnt/secrets/tls"
  client:
    jdbc:
      postgresUrl: "jdbc:postgresql://postgres.local:5432/qtest"
      postgresUserName: "qtest"
      sessionsSchema: "public"
      postgresPassword: ""
      postgresReadOnlyUrl: "jdbc:postgresql://postgres_replica.local:5432/qtest"
      postgresReadOnlyUserName: "qtest"
      postgresReadOnlyPassword: ""
      sslEnable: false
      sslMountPath: "/etc/ssl"
      sslPath: ""
      cert: ""
    dbcp:
      testWhileIdle: 1
  cors:
    allowed:
      all: true
      domains: ""
  elasticSearch:
    init: false
    disable: true
    scheme: http
    host: elasticsearch.local
    port: 9200
    permittedClients: ""
    maximumObjectsPerIndexRequest: 1000
  attachmentFolderPath: /mnt/data/qtest/attachments
  licenseFolderPath: /mnt/data/qtest
  blobStorage:
    region: us-east-1
    sharedBucket: "qtest"
    type: disk_storage
  s3:
    folder: qtest/manager
    scanUrl: https://clamav-13.container-dev.qtestdev.com
    accessKey: ""
    secretKey: ""
  security:
    csrf:
      source:
        trust:
          pattern: ""
  serverAppUseSecureCookie: true
  serverAppSSLRequired: false
  # Array of cipher suites for SSL/TLS connection in OpenSSL format (e.g. ["TLS_AES_256_GCM_SHA384", "TLS_CHACHA20_POLY1305_SHA256"])
  serverAppSSLCipherSuites: []
  preUrl: http://nephele.qtest.local
  preUrlHttps: https://nephele.qtest.local
  qasymphonyUrlPostfix: .qtest.local
  qasDirectoryAddress: http://qtest-auth.local/tc-auth
  kafka:
    enable: false
    bootstrapAddress: "kafka-broker.local:9092"
    schemaRegistryUrl: "https://schema-registry.local"
  preSessionUrl: "https://sessions.qtest.local"
  pulseUrlBase: "https://pulse.qtest.local"
  insightsUrl: "http://insights-service:8080"
  launchUrlBase: "https://launch.qtest.local"
  tdmSettingUrl: "http://parameters.qtest.local"
  notification:
    urlExternal: "https://notification.qtest.local"
    urlInternal: "http://notification.qtest.local"
  oidc:
    clientId: "NOT_A_REAL_CLIENT_ID"
    configurationUri: https://use.a.real.site/.well-known/openid-configuration
    redirectUri: https://use.a.real.site/login/oauth2/support/token
  qTest:
    serverMapUrl: "http://qtest.local/public/jira-widget/server-map"
    instance: US
    ODPrivate: false
    region: "Default Cluster"
    request:
      nonce:
        disabled: true
        mode: HighPrecision
  requestExecutionTimeUpperThreshold: -1
  siteFieldTemplateAssigningProjectBatchSize: 50
  taskExecutionTimeUpperThreshold: -1
  mail:
    host: "smtp.local"
    port: 465
    userName: "qtest"
    ## default password
    password: ""
    supportEmailAddress: supports@tricentis.com
    blockExternal: true
    starttls: false
  emailchange:
    allowClients: "null"
  integration:
    jira:
      testConnectionLegacyEndpointClients: ""
  parameterPageSize: 50
  logging:
    overrideEnabled: true
    configMountPath: /mnt/data/loggingcfg
    configFile: logback.xml
    levels:
      # syntax is logger: loglevel
      # will be converted to xml in configmap
      tc.integration: info
  data:
    volumeMount: /mnt/data/qtest
  vera:
    auto:
      testrun:
        beta:
          clients: "null"
  secret:
    volumeMount: /mnt/secrets/storage
    appVolumeMount: /mnt/secrets/storage/..data
  featureFlagOpOverrides:
    managerTestConfiguration:
      enabled: false
  l2c:
    enabled: false
    mountPath: /mnt/secrets/l2c
    config:
      url: https://localhost
      pemfile: /mnt/secrets/l2c/..data/license.pem
      issuer: test
      webhookUrl: https://localhost
      defaultProductFamily: QTEST
      supportedProductFamilies: QTEST
    env:
      productVersion: 1.0
      environment: l2c-dev
      productComponent: unknown
    jwttoken:
      envUrl: https://localhost
      oktaUrl: https://localhost
      envAudience: tta.admin
      oktaAudience: tta.admin
  kong:
    api:
      url: http://localhost:8001
  redis:
    host: localhost
    port: 6379
ui:
  action:
    task:
      executor:
        poolSize: 2
  asyncThreadNumber: 40
  backgroundEventMaxThreshold: 2000
  client:
    dbcp:
      maxActive: 200
      readOnlyMaxActive: 100
  ## if single instance then change to postgres
  springProfilesActive: postgres,readOnlyEnable,queueManager
  useriqEnabled: false
  resources: {}
  queue:
    manager:
      scheduler:
        enabled: false
      worker:
        enabled: false
api:
  appName: api
  asyncThreadNumber: 100
  background:
    event:
      maxThreshold: 15000
      apiThreshold: 300
      cleanUpInterval: "3600000"
      jiraCloudThreshold: 500
      jiraCloudRateLimitDelayTime: 0
      jiraCloudRateLimitRetryPeriod: 5
      jiraCloudRateLimitRetryTimes: 3
      jiraCloudRateLimitThreshold: 500
      jiraServerThreshold: 20
      oldDefectTrackingSystemsThreshold: 20
      testExecutionApiRetryTime: 1
      testExecutionApiThreshold: 2
  jiraCloudCategoryTaskExecutor:
    threadPool:
      keepWaitingSeconds: 180
  client:
    dbcp:
      maxActive: 400
  springProfilesActive: postgres,disableAllTasksMode,readOnlyEnable,backgroundQueue,queueManager
  resources: {}
  queue:
    manager:
      executor:
        pool:
          minSize: 1
          maxSize: 10
          queueCapacity: 25
      scheduler:
        enabled: true
        interval: 100
      worker:
        enabled: true
        thread:
          ttl: 300000
poller:
  appName: notification
  asyncThreadNumber: 100
  background:
    event:
      maxThreshold: 2000
      cleanUpInterval: "3600000"
  client:
    dbcp:
      maxActive: 150
  schedulerBlobHandleMaxRetryTimes: 5
  siteFieldTemplateAssigningProjectBatchSize: 50
  testconductorAppPath: testconductor-app.localhost.xml
  queuePublisherMaxDequeue: 300
  springProfilesActive: postgres,oldTrackingDefect,disableAllTasksMode,queueManager
  resources: {}
  queue:
    manager:
      scheduler:
        enabled: false
      worker:
        enabled: false
notification:
  action:
    task:
      executor:
        poolSize: 2
  appName: notification
  asyncThreadNumber: 100
  background:
    event:
      maxThreshold: 2000
      apiThreshold: 20
      cleanUpInterval: "3600000"
      jiraCloudThreshold: 20
      jiraCloudRateLimitDelayTime: 0
      jiraCloudRateLimitRetryPeriod: 5
      jiraCloudRateLimitRetryTimes: 3
      jiraCloudRateLimitThreshold: 500
      jiraServerThreshold: 20
      oldDefectTrackingSystemsThreshold: 20
      testExecutionApiRetryTime: 0
      testExecutionApiThreshold: 1
  jiraCloudCategoryTaskExecutor:
    threadPool:
      keepWaitingSeconds: 180
  client:
    dbcp:
      maxActive: 300
  springProfilesActive: postgres,backgroundQueue,queueManager
  schedulerBlobHandleMaxRetryTimes: 5
  queuePublisherMaxDequeue: 300
  resources: {}
  queue:
    manager:
      executor:
        pool:
          minSize: 1
          maxSize: 10
          queueCapacity: 25
      scheduler:
        enabled: false
      worker:
        enabled: true
testconductor:
  environment:
    isOnPremise: true
    singleInstance: true
    od:
      single: production
      ui: production
      api: production
      poller: notification.production
      notification: notification.production
    op:
      single: onpremise
      ui: ui.onpremise
      api: api.onpremise
      poller: poller.onpremise
      notification: notification.onpremise
  queue:
    manager:
      enabled: false
      awsRegion: ""
      implementation: "SQS"
      taskQueues: ""
      workQueue: ""
      workQueueDLQ: ""
      receive:
        waitTimeSeconds: 10
        visibilityTimeout: 120
      task:
        scheduler:
          interval: 100
      taskqueue:
        receive:
          maxMessages: 10
      worker:
        thread:
          ttl: 300000
#### Shared Resources definition for app Mgr pods in case you don't want to to define it on per pod basis
### You may also define per Mgr pod Resources above
resources: {}
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

#### Ingress/IngressClass (> K8s 1.24-1.30+) #####
ingressClass:
  enabled: false
  # existingclassName:
  labels: {}
  controller: ingress.k8s.aws/alb
  isDefaultClass: true
  ## Use to force a networking.k8s.io API Version for certain CI/CD applications. Ex. "v1"
  fallbackApiVersion: ""
ingress:
  enabled: true
  name: mgr-ingress
  labels: {}
  annotations: {}
  canary:
    annotationPrefix: alb.ingress.kubernetes.io
    annotations: {}
    # canary-by-header: []
    # canary-by-header-pattern: []
  hosts: []
  # host: qtest.svc.com

  paths: []
  # - path: /api
  #   pathType: Prefix
  #   backendServiceName: mgr-service-api
  #   backendPort: 8080
  # - path: /api2
  #   pathType: Prefix
  #   backendServiceName: mgr-service-api
  #   backendPort: 8080
  # - path: /api/v3
  #   pathType: Prefix
  #   backendServiceName: mgr-service-api
  #   backendPort: 8080
  # - path: /public/integration/webhookcallback2
  #   pathType: Prefix
  #   backendServiceName: mgr-service-api
  #   backendPort: 8080
  # - path: /realtime
  #   pathType: Prefix
  #   backendServiceName: mgr-service-notification
  #   backendPort: 8080

  extraPaths:
    - path: /
      pathType: Prefix
      backendServiceName: mgr-service
      backendPort: 8080
  tls: []
  # - secretName: qtest-svc-tls
  #   hosts:
  #     - svc.qtest.com
  https: false
persistence:
  enabled: true
  annotations: {}
  ## Specify an existing volume claim instead of creating a new one.
  ## When using this option all following options like storageClass, accessMode and size are ignored.
  # existingClaim: qtest-onpremise-pvc

  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ## set, choosing the default provisioner.  (gp2 on AWS, standard on
  ## GKE, AWS & OpenStack)
  ##
  storageClass:
  accessMode: ReadWriteMany
  size: 10Gi
  ## Specify extra volumes. Refer to ".spec.volumes" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  volumes: []
  ## Specify extra mounts. Refer to ".spec.containers.volumeMounts" specification : https://kubernetes.io/fr/docs/concepts/storage/volumes/
  mounts: []
  # VPA values
vpaAutoscaling:
  enabled: false
  updatePolicy:
    updateMode: "Off"
  resourcePolicy:
    containerPolicies:
      - containerName: "*"
        controlledValues: RequestsAndLimits
# HPA values
autoscaling:
  enabled: true
  minReplicas:
    ui: 1
    api: 1
    notification: 1
    poller: 1
    default: 1
  maxReplicas:
    ui: 3
    api: 3
    notification: 3
    poller: 1
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 70
  healthApiPath: /health-checker
podDisruptionBudget:
  enabled: true
resourceQuota:
  enabled: false
  hard:
    limits.cpu: "80"
    limits.memory: 400Gi
    requests.cpu: "64"
    requests.memory: 160Gi
    pods: "25"
    persistentvolumeclaims: "50"
    requests.storage: 500Gi
limitRange:
  enabled: false
  limits:
    - max:
        cpu: "2"
        memory: 16Gi
      default:
        cpu: "2"
        memory: 16Gi
      defaultRequest:
        cpu: "2"
        memory: 4Gi
      type: Container
## Readiness, liveness and startup probes
livenessProbe:
  httpGet:
    path: /health-checker
    port: 8080
  initialDelaySeconds: 70
  periodSeconds: 30
  failureThreshold: 20
livenessSslProbe:
  httpGet:
    path: /health-checker
    scheme: HTTPS
    port: 8443
  initialDelaySeconds: 70
  periodSeconds: 30
  failureThreshold: 20
readinessProbe:
  httpGet:
    path: /health-checker
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 30
  failureThreshold: 20
readinessSslProbe:
  httpGet:
    path: /health-checker
    scheme: HTTPS
    port: 8443
  initialDelaySeconds: 30
  periodSeconds: 30
  failureThreshold: 20
startupProbe:
  httpGet:
    path: /health-checker
    port: 8080
  periodSeconds: 30
  failureThreshold: 20
startupSslProbe:
  httpGet:
    path: /health-checker
    scheme: HTTPS
    port: 8443
  periodSeconds: 30
  failureThreshold: 20
nodeSelector: {}
tolerations: []
affinity: {}
topologySpreadConstraints: {}
### qtest-launch ###################################################
qtest-launch:
  enabled: false
### qtest-insights ###################################################
qtest-insights:
  enabled: false
### qtest-insights-etl ###################################################
qtest-insights-etl:
  enabled: false
### qtest-parameters ###################################################
qtest-parameters:
  enabled: false
### qtest-pulse ###################################################
qtest-pulse:
  enabled: false
### qtest-scenario ###################################################
qtest-scenario:
  enabled: false
### qtest-session ###################################################
qtest-session:
  enabled: false
