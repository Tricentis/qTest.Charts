{{- $postgresUrl := .Values.qTestManager.client.jdbc.postgresUrl -}}
{{- $postgresReadUrl := .Values.qTestManager.client.jdbc.postgresReadOnlyUrl -}}
{{- if .Values.qTestManager.client.jdbc.sslEnable }}
{{- $postgresUrl = printf "%s%s" .Values.qTestManager.client.jdbc.postgresUrl .Values.qTestManager.client.jdbc.sslPath -}}
{{- $postgresReadUrl = printf "%s%s" .Values.qTestManager.client.jdbc.postgresReadOnlyUrl .Values.qTestManager.client.jdbc.sslPath -}}
{{- end -}}
{{ if .Values.liquibase.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-liquibase-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
  {{- with .Values.liquibase.configmapAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
data:
  client.jdbc.postgres.url: {{ $postgresUrl }}
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
  client.jdbc.postgres.sessionsschema: "{{ .Values.qTestManager.client.jdbc.sessionsSchema }}"
---
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  analytics.url.base: "{{ .Values.qTestManager.analyticsUrlBase }}"
  configure.timeout.token.application.enabled: "{{ .Values.qTestManager.configureTimeoutTokenApplicationEnabled }}"
  cors.allowed.domains: "{{ .Values.qTestManager.cors.allowed.domains }}"
  client.dbcp.testWhileIdle: "{{ .Values.qTestManager.client.dbcp.testWhileIdle }}"
  client.jdbc.postgres.url: "{{ $postgresUrl }}"
  client.jdbc.postgres.username: "{{ .Values.qTestManager.client.jdbc.postgresUserName }}"
  client.jdbc.postgres.sessionsschema: "{{ .Values.qTestManager.client.jdbc.sessionsSchema }}"
  client.jdbc.postgres.readonly.url: "{{ $postgresReadUrl }}"
  client.jdbc.postgres.readonly.username: "{{ .Values.qTestManager.client.jdbc.postgresReadOnlyUserName }}"
  elasticsearch.init: "{{ .Values.qTestManager.elasticSearch.init }}"
  elasticsearch.disable: "{{ .Values.qTestManager.elasticSearch.disable }}"
  elasticsearch.scheme: "{{ .Values.qTestManager.elasticSearch.scheme }}"
  elasticsearch.host: "{{ .Values.qTestManager.elasticSearch.host }}"
  elasticsearch.port: "{{ .Values.qTestManager.elasticSearch.port }}"
  elasticsearch.maximum_objects_per_index_request: "{{ .Values.qTestManager.elasticSearch.maximumObjectsPerIndexRequest }}"
  attachment.folder.path: "{{ .Values.qTestManager.attachmentFolderPath }}"
  license.folder.path: "{{ .Values.qTestManager.licenseFolderPath }}"
  elasticsearch.permitted_clients: "{{ .Values.qTestManager.elasticSearch.permittedClients }}"
  blobStorage.region: "{{ .Values.qTestManager.blobStorage.region }}"
  blobStorage.sharedBucket: "{{ .Values.qTestManager.blobStorage.sharedBucket }}"
  s3.folder: "{{ .Values.qTestManager.s3.folder }}"
  s3.scan.url: "{{ .Values.qTestManager.s3.scanUrl }}"
  serverapp.useSecureCookie: "{{ .Values.qTestManager.serverAppUseSecureCookie }}"
  serverapp.ssl.required: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  serverapp.ssl.redirect.custom.status.enabled: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  parameter.page.size: "{{ .Values.qTestManager.parameterPageSize }}"
  preUrl: "{{ .Values.qTestManager.preUrl }}"
  preUrl.https: "{{ .Values.qTestManager.preUrlHttps }}"
  qasymphonyUrlPostfix: "{{ .Values.qTestManager.qasymphonyUrlPostfix }}"
  qas.directory.address: "{{ .Values.qTestManager.qasDirectoryAddress }}"
  qTest.instance: "{{ .Values.qTestManager.qTest.instance }}"
  kafka.bootstrapAddress: "{{ .Values.qTestManager.kafka.bootstrapAddress }}"
  kafka.schemaRegistryUrl: "{{ .Values.qTestManager.kafka.schemaRegistryUrl }}"
  qtest.kafka.enable: "{{ .Values.qTestManager.kafka.enable }}"
  pre.session.url: "{{ .Values.qTestManager.preSessionUrl }}"
  pulse.url.base: "{{ .Values.qTestManager.pulseUrlBase }}"
  insights.url: "{{ .Values.qTestManager.insightsUrl }}"
  launch.url.base: "{{ .Values.qTestManager.launchUrlBase }}"
  notification.url.external: "{{ .Values.qTestManager.notification.urlExternal }}"
  notification.url.internal: "{{ .Values.qTestManager.notification.urlInternal }}"
  qtest.servermap.url: "{{ .Values.qTestManager.qTest.serverMapUrl }}"
  tdm.setting.url: "{{ .Values.qTestManager.tdmSettingUrl }}"
  mail.host: "{{ .Values.qTestManager.mail.host }}"
  mail.port: "{{ .Values.qTestManager.mail.port }}"
  mail.username: "{{ .Values.qTestManager.mail.userName }}"
  mail.block.external: "{{ .Values.qTestManager.mail.blockExternal }}"
  mail.smtp.starttls.enable: "{{ .Values.qTestManager.mail.starttls }}"
  supportEmailAddress: "{{ .Values.qTestManager.mail.supportEmailAddress }}"
  integration.jira.testConnection.legacyEndpoint.clients: "{{ .Values.qTestManager.integration.jira.testConnectionLegacyEndpointClients }}"
  qtest.od.private: "{{ .Values.qTestManager.qTest.ODPrivate }}"
  secret.volume.mount.path: "{{ .Values.qTestManager.secret.appVolumeMount }}"
  emailchange.allow.clients: "{{ .Values.qTestManager.emailchange.allowClients }}"
  request.execution.time.upper.threshold: "{{ .Values.qTestManager.requestExecutionTimeUpperThreshold }}"
  task.execution.time.upper.threshold: "{{ .Values.qTestManager.taskExecutionTimeUpperThreshold }}"
  vera.auto.testrun.beta.clients: "{{ .Values.qTestManager.vera.auto.testrun.beta.clients }}"
  sslMountPath: "{{ .Values.qTestManager.server.sslMountPath }}"
  sslCiphers: "ciphers=\"{{- join "," .Values.qTestManager.serverAppSSLCipherSuites -}}\""
  isSSLRequired: "{{ .Values.qTestManager.serverAppSSLRequired }}"
  {{ if .Values.qTestManager.l2c.enabled }}
  l2c.config.url: "{{ .Values.qTestManager.l2c.config.url }}"
  l2c.config.pemfile: "{{ .Values.qTestManager.l2c.config.pemfile }}"
  l2c.config.issuer: "{{ .Values.qTestManager.l2c.config.issuer }}"
  l2c.config.webhookUrl: "{{ .Values.qTestManager.l2c.config.webhookUrl }}"
  l2c.config.defaultProductFamily: "{{ .Values.qTestManager.l2c.config.defaultProductFamily }}"
  l2c.config.supportedProductFamilies: "{{ .Values.qTestManager.l2c.config.supportedProductFamilies }}"
  l2c.env.productVersion: "{{ .Values.qTestManager.l2c.env.productVersion }}"
  l2c.env.environment: "{{ .Values.qTestManager.l2c.env.environment }}"
  l2c.env.productComponent: "{{ .Values.qTestManager.l2c.env.productComponent }}"
  l2c.jwttoken.envUrl: "{{ .Values.qTestManager.l2c.jwttoken.envUrl }}"
  l2c.jwttoken.oktaUrl: "{{ .Values.qTestManager.l2c.jwttoken.oktaUrl }}"
  l2c.jwttoken.envAudience: "{{ .Values.qTestManager.l2c.jwttoken.envAudience }}"
  l2c.jwttoken.oktaAudience: "{{ .Values.qTestManager.l2c.jwttoken.oktaAudience }}"
  qtest.region: "{{ .Values.qTestManager.qTest.region }}"
  {{ end }}
  {{ if .Values.testconductor.environment.isOnPremise }} 
  async.max.cpu: "{{ .Values.qTestManager.async.maxCpu }}"
  async.max.database.cpu: "{{ .Values.qTestManager.async.databaseCpu }}"
  blobStorage.type: "{{ .Values.qTestManager.blobStorage.type }}"
  s3.accessKey: "{{ .Values.qTestManager.s3.accessKey }}"
  s3.secretKey: "{{ .Values.qTestManager.s3.secretKey }}"
  qtest.request.nonce.disabled: "{{ .Values.qTestManager.qTest.request.nonce.disabled }}"
  qtest.request.nonce.mode: "{{ .Values.qTestManager.qTest.request.nonce.mode }}"
  security.csrf.source.trust.pattern: "{{ .Values.qTestManager.security.csrf.source.trust.pattern }}"
  cors.allowed.all: "{{ .Values.qTestManager.cors.allowed.all }}"
  manager.test.configuration: "{{ .Values.qTestManager.featureFlagOpOverrides.managerTestConfiguration.enabled }}"
  {{ else }}
  kong.api.url: "{{ .Values.qTestManager.kong.api.url }}"
  redis.host: "{{ .Values.qTestManager.redis.host }}"
  redis.port: "{{ .Values.qTestManager.redis.port }}"
  {{ end }}
  {{ if .Values.testconductor.queue.manager.enabled }}
  queue.manager.implementation: "{{ .Values.testconductor.queue.manager.implementation }}"
  queue.manager.sqs.aws.region: "{{ .Values.testconductor.queue.manager.awsRegion }}"
  queue.manager.taskqueue.urls: "{{ .Values.testconductor.queue.manager.taskQueues }}"
  queue.manager.taskqueue.receive.maxMessages: "{{ .Values.testconductor.queue.manager.taskqueue.receive.maxMessages }}"
  queue.manager.receive.waitTimeSeconds: "{{ .Values.testconductor.queue.manager.receive.waitTimeSeconds }}"
  queue.manager.workqueue.receive.visibilityTimeout: "{{ .Values.testconductor.queue.manager.receive.visibilityTimeout }}"
  queue.manager.workqueue.url: "{{ .Values.testconductor.queue.manager.workQueue }}"
  queue.manager.workqueueDLQ.url: "{{ .Values.testconductor.queue.manager.workQueueDLQ }}"
  queue.manager.task.scheduler.interval: "{{ .Values.testconductor.queue.manager.task.scheduler.interval }}"
  queue.manager.worker.thread.ttl: "{{ .Values.testconductor.queue.manager.worker.thread.ttl }}"
  {{ end }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-ui-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  action.task.executor.poolSize: "{{ .Values.ui.action.task.executor.poolSize }}"
  async.thread.number: "{{ .Values.ui.asyncThreadNumber }}"
  background.event.maxThreshold: "{{ .Values.ui.backgroundEventMaxThreshold }}"
  client.dbcp.maxActive: "{{ .Values.ui.client.dbcp.maxActive }}"
  client.dbcp.readonly.maxActive: "{{ .Values.ui.client.dbcp.readOnlyMaxActive }}"
  spring.profiles.active: "{{ .Values.ui.springProfilesActive }}"
  useriq.enabled: "{{ .Values.ui.useriqEnabled }}"
  queue.manager.task.scheduler.enabled: "{{ .Values.ui.queue.manager.scheduler.enabled }}"
  queue.manager.worker.enabled: "{{ .Values.ui.queue.manager.worker.enabled }}"
---
{{ if not .Values.testconductor.environment.singleInstance }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-notification-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  app.name: "{{ .Values.notification.appName }}"
  async.thread.number: "{{ .Values.notification.asyncThreadNumber }}"
  background.event.api.threshold: "{{ .Values.notification.background.event.apiThreshold }}"
  background.event.cleanUp.interval: "{{ .Values.notification.background.event.cleanUpInterval }}"
  background.event.jira_cloud.threshold: "{{ .Values.notification.background.event.jiraCloudThreshold }}"
  background.event.jira_cloud_ratelimit.delay_time: "{{ .Values.notification.background.event.jiraCloudRateLimitDelayTime }}"
  background.event.jira_cloud_ratelimit.retry_period: "{{ .Values.notification.background.event.jiraCloudRateLimitRetryPeriod }}"
  background.event.jira_cloud_ratelimit.retry_times: "{{ .Values.notification.background.event.jiraCloudRateLimitRetryTimes }}"
  background.event.jira_cloud_ratelimit.threshold: "{{ .Values.notification.background.event.jiraCloudRateLimitThreshold }}"
  background.event.jira_server.threshold: "{{ .Values.notification.background.event.jiraServerThreshold }}"
  background.event.maxThreshold: "{{ .Values.notification.background.event.maxThreshold }}"
  background.event.old_defect_tracking_systems.threshold: "{{ .Values.notification.background.event.oldDefectTrackingSystemsThreshold }}"
  background.event.test_execution_api.retry_times: "{{ .Values.notification.background.event.testExecutionApiRetryTime }}"
  background.event.test_execution_api.threshold: "{{ .Values.notification.background.event.testExecutionApiThreshold }}"
  jiraCloudCategoryTaskExecutor.threadPool.keepWaitingSeconds: "{{ .Values.notification.jiraCloudCategoryTaskExecutor.threadPool.keepWaitingSeconds }}"
  client.dbcp.maxActive: "{{ .Values.notification.client.dbcp.maxActive }}"
  spring.profiles.active: "{{ .Values.notification.springProfilesActive }}"
  scheduler.blobHandle.maxRetryTimes: "{{ .Values.notification.schedulerBlobHandleMaxRetryTimes }}"
  action.task.executor.poolSize: "{{ .Values.notification.action.task.executor.poolSize }}"
  com.qasymphony.qtest.event.service.ToscaQueueEventProcessingService.MAX_DEQUEUE: "{{ .Values.notification.queuePublisherMaxDequeue }}"
  queue.manager.task.scheduler.enabled: "{{ .Values.notification.queue.manager.scheduler.enabled }}"
  queue.manager.worker.enabled: "{{ .Values.notification.queue.manager.worker.enabled }}"
  queue.manager.executor.pool.min.size: "{{ .Values.notification.queue.manager.executor.pool.minSize }}"
  queue.manager.executor.pool.max.size: "{{ .Values.notification.queue.manager.executor.pool.maxSize }}"
  queue.manager.executor.pool.queue.capacity: "{{ .Values.notification.queue.manager.executor.pool.queueCapacity }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-api-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  app.name: "{{ .Values.api.appName }}"
  async.thread.number: "{{ .Values.api.asyncThreadNumber }}"
  background.event.api.threshold: "{{ .Values.api.background.event.apiThreshold }}"
  background.event.cleanUp.interval: "{{ .Values.api.background.event.cleanUpInterval }}"
  background.event.jira_cloud.threshold: "{{ .Values.api.background.event.jiraCloudThreshold }}"
  background.event.jira_cloud_ratelimit.delay_time: "{{ .Values.notification.background.event.jiraCloudRateLimitDelayTime }}"
  background.event.jira_cloud_ratelimit.retry_period: "{{ .Values.notification.background.event.jiraCloudRateLimitRetryPeriod }}"
  background.event.jira_cloud_ratelimit.retry_times: "{{ .Values.notification.background.event.jiraCloudRateLimitRetryTimes }}"
  background.event.jira_cloud_ratelimit.threshold: "{{ .Values.api.background.event.jiraCloudRateLimitThreshold }}"
  background.event.jira_server.threshold: "{{ .Values.api.background.event.jiraServerThreshold }}"
  background.event.maxThreshold: "{{ .Values.api.background.event.maxThreshold }}"
  background.event.old_defect_tracking_systems.threshold: "{{ .Values.api.background.event.oldDefectTrackingSystemsThreshold }}"
  background.event.test_execution_api.retry_times: "{{ .Values.api.background.event.testExecutionApiRetryTime }}"
  background.event.test_execution_api.threshold: "{{ .Values.api.background.event.testExecutionApiThreshold }}"
  jiraCloudCategoryTaskExecutor.threadPool.keepWaitingSeconds: "{{ .Values.api.jiraCloudCategoryTaskExecutor.threadPool.keepWaitingSeconds }}"
  client.dbcp.maxActive: "{{ .Values.api.client.dbcp.maxActive }}"
  spring.profiles.active: "{{ .Values.api.springProfilesActive }}"
  queue.manager.task.scheduler.enabled: "{{ .Values.api.queue.manager.scheduler.enabled }}"
  queue.manager.worker.enabled: "{{ .Values.api.queue.manager.worker.enabled }}"
  queue.manager.task.scheduler.interval: "{{ .Values.api.queue.manager.scheduler.interval }}"
  queue.manager.executor.pool.min.size: "{{ .Values.api.queue.manager.executor.pool.minSize }}"
  queue.manager.executor.pool.max.size: "{{ .Values.api.queue.manager.executor.pool.maxSize }}"
  queue.manager.executor.pool.queue.capacity: "{{ .Values.api.queue.manager.executor.pool.queueCapacity }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: qtest-manager-poller-config
  namespace: {{ .Values.namespace.name }}
  labels:
    app: qtest-mgr
data:
  app.name: "{{ .Values.poller.appName }}"
  async.thread.number: "{{ .Values.poller.asyncThreadNumber }}"
  background.event.cleanUp.interval: "{{ .Values.poller.background.event.cleanUpInterval }}"
  background.event.maxThreshold: "{{ .Values.poller.background.event.maxThreshold }}"
  client.dbcp.maxActive: "{{ .Values.poller.client.dbcp.maxActive }}"
  com.qasymphony.qtest.event.service.QueuePublisher.MAX_DEQUEUE:  "{{ .Values.poller.queuePublisherMaxDequeue }}"
  scheduler.blobHandle.maxRetryTimes: "{{ .Values.poller.schedulerBlobHandleMaxRetryTimes }}"
  site.field.template.assigning.project.batch.size: "{{ .Values.poller.siteFieldTemplateAssigningProjectBatchSize }}"
  spring.profiles.active: "{{ .Values.poller.springProfilesActive }}"
  testconductor.app.path: "{{ .Values.poller.testconductorAppPath }}"
  queue.manager.task.scheduler.enabled: "{{ .Values.poller.queue.manager.scheduler.enabled }}"
  queue.manager.worker.enabled: "{{ .Values.poller.queue.manager.worker.enabled }}"
{{- end }}
